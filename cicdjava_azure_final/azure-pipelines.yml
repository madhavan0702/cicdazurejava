trigger:
  - main

# Use your self-hosted agent pool instead of Microsoft-hosted
pool:
  name: Default   # <-- your agent pool name (where LAPTOP-8D8K13ES is registered)

variables:
  ACR_NAME: 'myacrname'                      # <-- replace with your Azure Container Registry name
  ACR_LOGIN_SERVER: 'myacrname.azurecr.io'   # <-- replace with your ACR login server
  IMAGE_NAME: 'cicdjava'
  TAG: '$(Build.BuildId)'
  AZURE_WEBAPP_NAME: 'mywebapp'              # <-- replace with your Web App name
  AZURE_RESOURCE_GROUP: 'myresourcegroup'    # <-- replace with your resource group
  AZURE_SERVICE_CONNECTION: 'My-Azure-Connection' # <-- replace with your real service connection name

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean package -DskipTests=false'
    options: '-B'

- script: |
    echo "Build finished. Showing artifact..."
    ls -l target
  displayName: 'List build artifacts'

- script: |
    echo "Logging in to ACR"
    echo $(ACR_PASSWORD) | docker login $(ACR_LOGIN_SERVER) -u $(ACR_USERNAME) --password-stdin
    docker build -t $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(TAG) .
    docker push $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(TAG)
  displayName: 'Build and push Docker image'
  env:
    ACR_USERNAME: $(ACR_USERNAME)
    ACR_PASSWORD: $(ACR_PASSWORD)

- task: AzureWebAppContainer@1
  inputs:
    azureSubscription: '$(AZURE_SERVICE_CONNECTION)'   # variable now points to real connection
    appName: '$(AZURE_WEBAPP_NAME)'
    resourceGroupName: '$(AZURE_RESOURCE_GROUP)'
    containers: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(TAG)'
  displayName: 'Deploy to Azure Web App for Containers'
